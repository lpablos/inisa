{"version":3,"file":"ConceptoTabla-2c862d2d.js","sources":["../../../resources/js/Pages/Cotizaciones/partials/ConceptoTabla.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Inertia } from '@inertiajs/inertia';\nimport { DataTable } from \"primereact/datatable\";\nimport { Column } from \"primereact/column\";\nimport { Button } from \"primereact/button\";\nimport { Toast } from \"primereact/toast\";\nimport Dialogo from \"./Dialogo\"; // Componente para el modal\nimport ConfirmarEliminacion from \"./ConfirmarEliminacion\";\nimport ConfirmarDuplicacion from \"./ConfirmarDuplicacion\";\nimport axios from \"axios\";\nimport { Tooltip } from 'primereact/tooltip';\nimport \"../../../../css/style_cotizacion.css\";\nimport { Badge } from 'primereact/badge';\nimport { Chip } from 'primereact/chip';\nimport VistaPreviaCotizacion from \"./VistaPreviaCotizacion\";\nimport { Tag } from 'primereact/tag';\nimport CodigosDialog from \"./CodigosDialog\";\nimport BusquedaCotizacion from \"./BusquedaCotizacion\";\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport { Message } from 'primereact/message';\nimport BusquedaAvanzadaCotizacion from \"./BusquedaAvanzadaCotizacion\";\nimport { useLocalStorage } from \"primereact/hooks\";\nimport ExcelPersonalizador from \"./ExcelPersonalizador\";\n        \n\n\n\n\nconst ConceptoTabla = () => {\n    const [seleccionCotizacion, setSeleccionCotizacion] = useState(null)    \n    const [codigosShow, setCodigosShow] = useState(false)\n    const [cotizaciones, setCotizaciones] = useState([]); // Lista de cotizaciones\n    const [selectedCotizacion, setSelectedCotizacion] = useState(null); // Cotización seleccionada\n    const [isDialogVisible, setIsDialogVisible] = useState(false); // Visibilidad del modal\n    const [isEdit, setIsEdit] = useState(false); // Modo edición o creación\n    const [loader, setLoader] = useState(false); // Control de loader\n    const toast = useRef(null); // Referencia de Toast\n    const [vistraPreviaPDF, setVistraPreviaPDF] = useState(false)\n    const [identyPDFDetalle, setIdentyPDFDetalle] = useState(null);\n    const [buscadorEstatus, setBuscadorEstatus] = useState(null)\n    const [vistaPreviaExcel, setVistaPreviaExcel] = useState(false);\n    const [identyExcelDetalle, setIdentyExcelDetalle] = useState(null);\n\n\n    // Cargar cotizaciones\n    const resultadosBusquedaCotizaciones = (data) =>{\n        const {cotizaciones} = data\n        setCotizaciones([]);\n        setLoader(true);\n        setTimeout(() => {\n            if(cotizaciones.length > 0){\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Cotizaciones\",\n                    detail: \"Se encontraron registros\",\n                    life: 3000,\n                });\n            }else{\n                toast.current.show({\n                    severity: \"info\",\n                    summary: \"Cotizaciones\",\n                    detail: \"No se encontraron suficientes registros.. Intenta con otros valores\",\n                    life: 3000,\n                });\n            }\n            setCotizaciones(cotizaciones)\n            setLoader(false);\n        }, 2000);\n    }\n\n    const obtenerCotizaciones = async () => {\n        \n        setCotizaciones([]);\n        setLoader(true);\n        try {     \n            // const response = await axios.get(route(\"catalogos.detalle.cliente.asc\"), { estatus: buscadorEstatus });  \n            const response = await axios.get(route(\"cotizacion.list.cotizaciones\"), { \n                params: { estatus: buscadorEstatus } \n              });\n            \n               \n            const {cotizaciones} = response.data\n            if(cotizaciones.length > 0 ){\n                setCotizaciones(cotizaciones);\n            }\n            setLoader(false);\n            // console.log(\"cotizaciones\", response.data.cotizaciones);\n        } catch (error) {\n            console.error(\"Error al obtener cotizaciones:\", error);\n            setCotizaciones([]);\n            setLoader(false);\n        }\n    };\n\n    useEffect(() => {\n        setTimeout(() => {\n            obtenerCotizaciones(); // Cargar datos al montar el componente\n        }, 1000);\n    }, []);\n\n    // Crear una nueva cotización\n    const handleCrear = () => {\n        setSelectedCotizacion(null); // Limpia los datos seleccionados\n        setIsEdit(false); // Cambia a modo creación\n        setIsDialogVisible(true); // Abre el modal\n    };\n\n    // Editar una cotización\n    const handleEditar = (rowData) => {\n        setSelectedCotizacion(rowData); // Establece la cotización seleccionada\n        setIsEdit(true); // Cambia a modo edición\n        setIsDialogVisible(true); // Abre el modal\n        console.log(rowData);\n    };\n\n    const renderStatus = (rowData) => {\n        return (\n            <div className=\"flex justify-content-center\">\n                <span className=\"p-overlay-badge\" data-pr-tooltip={rowData.estatus.descripcion} id={`tooltip-${rowData.id}`}>\n                    <Badge value={rowData.estatus.abreviacion} />\n                </span>\n                <Tooltip target={`#tooltip-${rowData.id}`} />\n            </div>\n        );\n    };\n\n    const renderValides = (rowData) => {\n        return (\n            <div style={{ display: 'flex', gap: '18px', width: '45 rem' }}>\n                <Chip label={rowData.fecha_cotiza_inicio+' '+rowData.fecha_cotiza_fin} />\n            </div>\n        );\n    };\n\n    const renderTipo = (rowData) => {\n        return (\n            <div style={{ display: 'flex', gap: '18px', width: '45 rem' }}>\n                {rowData.es_material == 1 && (\n                    \"Material\"\n                )}\n                {rowData.es_mano_obra == 1 && (\n                    \"Material Con Mano de Obra\"\n                )}\n            </div>\n        );\n    };\n\n    const renderFecha = (rowData) => {\n        const fechaObj = new Date(rowData.fecha);\n        const fechaFormateada = `${fechaObj.getDate()}-${fechaObj.getMonth() + 1}-${fechaObj.getFullYear()}`;\n        return (\n            <>{fechaFormateada}</>\n        );\n    };\n\n    // Eliminar una cotización\n    const eliminarCotizacion = async (id) => {\n        setLoader(true);\n        try {\n            await axios.delete(route(\"cotizacion.delete.cotizacion\", { id }));\n            toast.current.show({\n                severity: \"success\",\n                summary: \"Cotización eliminada\",\n                detail: \"La cotización ha sido eliminada exitosamente.\",\n                life: 3000,\n            });\n            obtenerCotizaciones(); // Refresca la tabla\n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo eliminar la cotización.\",\n                life: 3000,\n            });\n            console.error(\"Error al eliminar cotización:\", error);\n        } finally {\n            setLoader(false);\n        }\n    };\n\n    // Confirmar eliminación\n    const confirmarEliminacionCotizacion = (id, titulo) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarEliminacion\n                    mensaje={`¿Estás seguro de eliminar la cotización \"${titulo}\"?`}\n                    onConfirm={() => {\n                        eliminarCotizacion(id);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n\n    const confirmarDuplicacionCotizacion = (id, titulo) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarDuplicacion\n                    mensaje={`¿Estás seguro de duplicar la cotización \"${titulo}\"?`}\n                    onConfirm={() => {\n                        deplicarCotizacion(id);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n    const deplicarCotizacion = async (id) => {\n        setLoader(true);\n        try {\n            await axios.post(route(\"cotizacion.duplicar.cotizacion\", { id }));\n            toast.current.show({\n                severity: \"success\",\n                summary: \"Cotización duplicada\",\n                detail: \"La cotización ha sido duplicada exitosamente.\",\n                life: 3000,\n            });\n            obtenerCotizaciones(); // Refresca la tabla\n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo duplicar la cotización.\",\n                life: 3000,\n            });\n            console.error(\"Error al duplicar la  cotización:\", error);\n        } finally {\n            setLoader(false);\n        }\n    };\n\n    // const handleExportClick = (id) => {\n        \n        // const url = `${route(\"exportar.excel.cotizacion\", { id: 1 })}`;\n        // // console.log(\"Este es la ruta\", url);\n        // setTimeout(() => {\n\n        //     Inertia.visit(url, { method: 'get' }); // Realiza la navegación.\n        // }, 1000);\n        //const url = route('exportar.excel.cotizacion', id); // Genera la URL dinámica.\n    // };\n\n    const mostrarExcelDetalle = (id) =>{\n        setIdentyExcelDetalle(id)\n        setTimeout(() => {\n            setVistaPreviaExcel(true)\n        }, 500);\n    }\n\n    const mostrarPDFDetalle = (id) =>{\n        setIdentyPDFDetalle(id)\n        setTimeout(() => {\n            setVistraPreviaPDF(true)\n        }, 500);\n    }\n\n    \n    // Plantilla para las acciones\n    const accionesTemplate = (rowData) => (\n        <div className=\"flex gap-2\">\n            <a\n                id=\"capture-link\"\n                href={route(\"cotizacion.captura.detalle\", { identy: rowData.id })}\n                size=\"small\"\n                rel=\"noopener noreferrer\"\n                className=\"p-button-rounded p-button\"\n            >\n                <i className=\"pi pi-pencil\"></i>\n            </a>\n            <Button\n                size=\"small\"\n                icon=\"pi pi-folder-open\"\n                tooltip=\"Detalle\"\n                tooltipOptions={{ position: \"bottom\", showDelay: 200, hideDelay: 300 }}\n                className=\"p-button-rounded p-button-info p-button-sm\"\n                onClick={() => handleEditar(rowData)}\n            />\n            <Button\n                severity=\"success\"\n                size=\"small\"\n                icon=\"pi pi-file-excel\"\n                tooltip=\"Vista Previa Excel\"\n                tooltipOptions={{ position: \"bottom\", showDelay: 200, hideDelay: 300 }}\n                className=\"p-button-rounded p-button-info p-button-sm\"\n                onClick={() => mostrarExcelDetalle(rowData.id) }\n            />\n            <Button\n                severity=\"success\"\n                size=\"small\"\n                icon=\"pi pi-file-pdf\"\n                tooltip=\"Vista Previa PDF\"\n                tooltipOptions={{ position: \"bottom\", showDelay: 200, hideDelay: 300 }}\n                className=\"p-button-rounded p-button-info p-button-sm\"\n                onClick={() => mostrarPDFDetalle(rowData.id)}\n            />\n             <Button \n                size=\"small\" \n                className=\"p-button-rounded p-button-secondary p-button-sm\"\n                tooltipOptions={{ position: \"bottom\", showDelay: 200, hideDelay: 300 }}\n                tooltip=\"Agregar Codigo\"\n                icon=\"pi pi-qrcode\"  \n                onClick={() => { setCodigosShow(true); setSeleccionCotizacion(rowData.id);}} \n            />\n            \n          \n            <Button\n                size=\"small\"\n                icon=\"pi pi-copy\"\n                className=\"p-button-rounded p-button-warning p-button-sm\"\n                tooltip=\"Duplicar\"\n                tooltipOptions={{ position: \"bottom\", showDelay: 200, hideDelay: 300 }}\n                onClick={() =>\n                    confirmarDuplicacionCotizacion(rowData.id, rowData.titulo)\n                }\n            />\n           \n           \n            <Button\n                size=\"small\"\n                icon=\"pi pi-trash\"\n                className=\"p-button-rounded p-button-danger p-button-sm\"\n                tooltip=\"Eliminar\"\n                tooltipOptions={{ position: \"bottom\", showDelay: 200, hideDelay: 300 }}\n                onClick={() =>\n                    confirmarEliminacionCotizacion(rowData.id, rowData.titulo)\n                }\n            />\n            <Tooltip target=\"#capture-link\" content=\"Captura la cotizacion\" position=\"bottom\" />\n        </div>\n    );\n\n    // const codigosAsc = (rowData) => (\n    //     <div className=\"flex flex-wrap justify-content-center gap-1\">\n    //         {Array.isArray(rowData.codigos) ? (\n    //             rowData.codigos.map((row, index) => (\n    //                 <Tag\n    //                     key={row.id ?? index}\n    //                     severity=\"info\"\n    //                     value={`${row.codigo? `Cód.: ${row.codigo}`:''}  ${row.fecha ? `- Fecha: ${row.fecha}` : ''}`}\n    //                     rounded\n    //                     style={{ width: '250px', textAlign: 'center' }}\n    //                 />\n    //             ))\n    //         ) : (\n    //             <p>No hay datos disponibles</p>\n    //         )}\n              \n    //     </div>\n    // );\n    \n    // Cerrar el diálogo\n    const handleCerrarDialogo = () => {\n        setIsDialogVisible(false);\n        setSelectedCotizacion(null);\n    };\n\n    const reloadHideCodigos = (validacion) =>{\n        obtenerCotizaciones();\n        setCodigosShow(validacion)\n    }\n\n    const ActivarBusqueda = (dato) =>{\n        setLoader(true);\n        const {id} =dato\n        setBuscadorEstatus(id)\n        setTimeout(() => {\n            obtenerCotizaciones()\n        }, 1000);\n    }\n\n    return (\n        <div className=\"card\">\n         \n          \n            <div className=\"flex justify-end items-center gap-x-4 flex-wrap mb-7\">\n                <BusquedaCotizacion className=\"mr-2\" activarBusqueda={ActivarBusqueda}/>\n                <Button \n                    icon=\"pi pi-plus\" \n                    tooltip=\"Nueva Cotización\" \n                    tooltipOptions={{ showDelay: 100, hideDelay: 300 }} \n                    rounded \n                    severity=\"info\" \n                    className=\"ml-2\"\n                    aria-label=\"Nueva Cotización\" \n                    onClick={handleCrear} \n                />\n                <BusquedaAvanzadaCotizacion resultadosBusqueda={resultadosBusquedaCotizaciones}/>\n\n            </div>\n\n            {loader && (\n                <div className=\"card flex justify-content-center\">\n                    <ProgressSpinner />\n                </div>\n            )}\n            {loader === false && (\n                <>\n                    {cotizaciones.length > 0 && (\n                        <DataTable\n                            value={cotizaciones}\n                            paginator\n                            rows={40}\n                            size={'small'}\n                        >\n                            <Column field=\"id\" header=\"ID\" headerStyle={{ textAlign: 'center' }}  />\n                            <Column field=\"folio\" header=\"Cotización Folio\" headerStyle={{ textAlign: 'center', fontWeight: 'bold' }} />\n                            <Column field=\"titulo\" header=\"Título\" headerStyle={{ textAlign: 'center' }} />\n                            <Column field=\"fecha\" header=\"Fecha\"  style={{ width: '9em' }} body={(rowData) => renderFecha(rowData)}/>\n                            <Column header=\"Plantilla\"  style={{ width: '9em' }}  body={(rowData) => renderTipo(rowData)}/>\n                            {/* <Column field=\"valides\" header=\"Válido Intervalo\" style={{ width: '9em' }} body={(rowData) => renderValides(rowData)}/> */}\n                            <Column field=\"estatus.nombre\" header=\"Status\" body={(rowData) => renderStatus(rowData)}/>\n                            <Column header=\"Acciones\" body={accionesTemplate} />\n                        </DataTable>\n                    )}\n\n                    {cotizaciones.length === 0 && (\n                        <div className=\"card flex justify-content-center\">\n                            <Message text=\"No se encontraron suficientes registros\" />\n                        </div>\n                    )}\n                </>\n            )}\n            \n            <Toast ref={toast} />\n            {/* Modal para crear/editar */}\n            {isDialogVisible && (\n                <Dialogo\n                    isEdit={isEdit}\n                    dataToEdit={selectedCotizacion}\n                    onSave={() => {\n                        handleCerrarDialogo();\n                        obtenerCotizaciones();\n                    }}\n                    onUpdate={() => {\n                        handleCerrarDialogo();\n                        obtenerCotizaciones();\n                    }}\n                    onClose={handleCerrarDialogo}\n                />\n            )}\n            <CodigosDialog seleccionCotizacion={seleccionCotizacion} codigosShow={codigosShow} setCodigosShow={reloadHideCodigos}/>\n            <VistaPreviaCotizacion  identyCotizacion={identyPDFDetalle} vistraPreviaPDF={vistraPreviaPDF} setVistraPreviaPDF={setVistraPreviaPDF}/>\n            <ExcelPersonalizador  identyCotizacion={identyExcelDetalle} vistaPreviaExcel={vistaPreviaExcel} setVistaPreviaExcel={setVistaPreviaExcel}/>\n        </div>\n    );\n};\n\nexport default ConceptoTabla;\n"],"names":["ConceptoTabla","seleccionCotizacion","setSeleccionCotizacion","useState","codigosShow","setCodigosShow","cotizaciones","setCotizaciones","selectedCotizacion","setSelectedCotizacion","isDialogVisible","setIsDialogVisible","isEdit","setIsEdit","loader","setLoader","toast","useRef","vistraPreviaPDF","setVistraPreviaPDF","identyPDFDetalle","setIdentyPDFDetalle","buscadorEstatus","setBuscadorEstatus","vistaPreviaExcel","setVistaPreviaExcel","identyExcelDetalle","setIdentyExcelDetalle","resultadosBusquedaCotizaciones","data","obtenerCotizaciones","response","axios","error","useEffect","handleCrear","handleEditar","rowData","renderStatus","jsxs","jsx","Badge","Tooltip","renderTipo","renderFecha","fechaObj","fechaFormateada","eliminarCotizacion","id","confirmarEliminacionCotizacion","titulo","ConfirmarEliminacion","confirmarDuplicacionCotizacion","ConfirmarDuplicacion","deplicarCotizacion","mostrarExcelDetalle","mostrarPDFDetalle","accionesTemplate","Button","handleCerrarDialogo","reloadHideCodigos","validacion","ActivarBusqueda","dato","BusquedaCotizacion","BusquedaAvanzadaCotizacion","ProgressSpinner","Fragment","DataTable","Column","Message","Toast","Dialogo","CodigosDialog","VistaPreviaCotizacion","ExcelPersonalizador"],"mappings":"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"}