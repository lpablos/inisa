{"version":3,"file":"DialogoCat-2f1429ce.js","sources":["../../../resources/js/Pages/Catalogos/Partials/DialogoCat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { Button } from \"primereact/button\";\nimport { Dialog } from \"primereact/dialog\";\nimport { Card } from \"primereact/card\";\nimport TablasCatalogos from \"./TablasCatalogos\";\nimport FormularioProvedor from \"./FormularioProvedor\";\nimport FormularioDepartamento from \"./FormularioDepartamento\";\nimport FormularioClientes from \"./FormularioClientes\";\nimport FormularioUnidadMedida from \"./FormularioUnidadMedida\";\nimport FormularioUsuario from \"./FormularioUsuario\";\nimport FormularioEmpresa from \"./FormularioEmpresa\";\nimport ConfirmarEliminacion from \"./ConfirmarEliminacion\";\nimport { Toast } from \"primereact/toast\";\nimport { ProgressSpinner } from 'primereact/progressspinner';\nimport FormularioMoneda from \"./FormularioMoneda\";\nimport FormularioStatus from \"./FormularioStatus\";\n\nexport default function DialogoCat({ tpOperacion, setOperacion }) {\n    const [visible, setVisible] = useState(false);\n    const [titulo, setTitulo] = useState(\"\");\n    const [data, setData] = useState([]); // La data de los request\n    const [dataDetalle, setDataDetalle] = useState({});\n    const [limpiarFormulario, setLimpiarFormulario] = useState(false)\n    const [modoForm, setModoForm] = useState('Guardar');\n    const [loader, setLoader] = useState(false);\n\n    const [ocultarTabla, setOcultarTabla] = useState(false);\n    const [ocultarFormulario, setOcultarFormulario] = useState(true);\n    const toast = useRef(null);\n\n    useEffect(() => {\n        setLoader(true)\n        setOcultarFormulario(true);\n        setOcultarTabla(false);\n        console.log(\"Este es\", tpOperacion);\n        \n        switch (tpOperacion) {\n            case \"provedores\":\n                setVisible(true);\n                obtenerProvedores();\n                setTitulo(\"Catalogo de Provedores\");\n                break;\n            case \"departamentos\":\n                setVisible(true);\n                obtenerDepartamentos();\n                setTitulo(\"Catalogo de Departamentos\");\n                break;\n            // case \"clientes\":\n            //     setVisible(true);\n            //     obtenerClientes();\n            //     setTitulo(\"Catalogo de Clientes\");\n            //     break;\n            case \"unidadesMedidas\":\n                setTitulo(\"Catalogo de Unidades de Medida\");\n                obtenerUnidadesMedidas();\n                setVisible(true);\n                break;\n            case \"tiposMonedas\":\n                setTitulo(\"Catalogo de Tipos de Monedas\");\n                obtenerTiposMonedas();\n                setVisible(true);\n                break;\n            case \"tiposStatus\":\n                setTitulo(\"Catalogo de Status\");\n                obtenerStatus();\n                setVisible(true);\n                break;\n            // case \"tiposStatus\":\n            //     setTitulo(\"Catalogo de Status\");\n            //     obtenerUnidadesMedidas();\n            //     setVisible(true);\n            //     break;\n            case \"usuarios\":\n                // setTitulo(\"Catalogo de Usuarios\");\n                // obtenerUsuarios();\n                // setVisible(true);\n                break;\n\n\n\n            case \"datosEmpresa\":\n                setTitulo(\"Datos de la Empresa\");\n                obtenerEmpresa();\n                setVisible(true);\n                break;\n            default:\n                setTitulo(\"\");\n                setVisible(false);\n                setOperacion(null);\n                break;\n        }\n    }, [tpOperacion]);\n\n    const eliminiarRegistro = async (identy) => {\n        console.log(\"Este es el identy\", identy,tpOperacion);\n        \n        switch (tpOperacion) {\n            case \"provedores\":\n                await confirmarEliminacion(identy);\n                break;\n            case \"departamentos\":\n                await confirmarEliminacionDepartamento(identy);\n                break;\n            case \"clientes\":\n                await confirmarEliminacionClientes(identy);\n                break;\n            case \"unidadesMedidas\":\n                await confirmarEliminacionUnidadMedida(identy);\n                break;\n            case \"tiposMonedas\":\n                await confirmarEliminacionTipoMoneda(identy);\n                break;\n            case \"tiposStatus\":\n                await confirmarEliminacionStatu(identy);\n                break;\n            // case \"usuarios\":\n            //     setTitulo(\"Catalogo de Usuarios\");\n            //     obtenerUsuarios();\n            //     setVisible(true);\n            //     break;\n            // case \"datosEmpresa\":\n            //     setTitulo(\"Datos de la Empresa\");\n            //     obtenerEmpresa();\n            //     setVisible(true);\n            //     break;\n            default:\n                setTitulo(\"\");\n                setVisible(false);\n                setOperacion(null);\n                break;\n        }\n      \n    };\n\n    const updateRegistro = (identy) => {\n        switch (tpOperacion) {\n            case \"provedores\":\n                obtenerDetalleProvedor(identy);\n                break;\n            case \"departamentos\":\n                obtenerDetalleDepartamento(identy);\n                break;\n            case \"clientes\":\n                obtenerDetalleCliente(identy);\n                break;\n            case \"unidadesMedidas\":\n                obtenerDetalleUnidadMedida(identy);\n                break;\n            case \"tiposMonedas\":\n                obtenerDetalleTipoMoneda(identy);\n                break;\n            case \"tiposStatus\":\n                obtenerDetalleStatu(identy);\n                break;\n            // case \"usuarios\":\n            //     obtenerDetalleUsuario(identy);\n            //     break;\n            // case \"datosEmpresa\":\n            //     obtenerDetalleEmpresa(identy);\n            //     break;\n            default:\n                // ...\n                break;\n        }\n        // Mostrar o oculatar formularo\n        setLimpiarFormulario(false)\n        setOcultarFormulario(false);\n        setOcultarTabla(true);\n        setModoForm('Actualizar')\n        \n    };\n\n\n\n\n    // CRUD Provedor\n    const obtenerProvedores = async () => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.list.provedores\")}`)\n            .then((response) => {\n                const { data } = response;\n                setData(data);\n                setLoader(true)\n            })\n            .finally(()=>{\n                setLoader(false)\n            })\n    };\n    const obtenerDetalleProvedor = async (identy) => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.detalle.proveedor\", { id: identy })}`)\n            .then((response) => {\n                setDataDetalle(response);\n            })\n            .finally(()=>{\n                setLoader(false)\n            });\n    };\n\n    const actualizarProvedor = async (datos) => {\n        setLoader(true);        \n        await axios\n            .post(`${route(\"catalogo.actualiza.provedor\")}`, datos)\n            .then((response) => {\n                const { status, data } = response;\n                // setDataDetalle(response)\n                if (status == 201) {\n                    toast.current.show({\n                        severity: \"success\",\n                        summary: \"Success\",\n                        detail: `${data.success}`,\n                        life: 3000,\n                    });\n                    showTabla();\n                    obtenerProvedores();\n                }\n            })\n            .finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const nuevoProvedor = async (datos) =>{\n        setLoader(true); \n        await axios\n        .post(`${route(\"catalogo.nuevo.provedor\")}`, datos)\n        .then((response) => {\n            const { status, data } = response;\n            // setDataDetalle(response)\n            if (status == 201) {\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerProvedores();\n            }\n        })\n        .finally(() => {\n            setLoader(false);\n        });\n        \n    }\n\n\n\n\n    // CRUD Departamento\n    const obtenerDepartamentos = async () => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.list.departamentos\")}`)\n            .then((response) => {\n                const { data } = response;\n                setData(data);\n            }).\n            finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const obtenerDetalleDepartamento = async (identy) => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.detalle.departamento\", { id: identy })}`)\n            .then((response) => {\n                console.log(\"datos departamento\", response);\n                setDataDetalle(response);\n            }).\n            finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const actualizarDepartamento = async (datos) => {\n        setLoader(true);\n        try {\n            const response = await axios.post(\n                `${route(\"catalogo.actualiza.departamento\")}`,\n                datos\n            );\n\n            const { status, data } = response;\n\n            if (status === 201) {\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                \n                // Actualizar la tabla y obtener los departamentos\n                showTabla();\n                obtenerDepartamentos();\n                setLoader(false);\n            }\n        } catch (error) {\n            console.error(\"Error actualizando el departamento:\", error);\n            setLoader(false);\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"Ocurrió un error al actualizar el departamento.\",\n                life: 3000,\n            });\n        }\n    };\n\n    const nuevoDepartamento = async (datos) =>{\n        setLoader(true); \n        await axios\n        .post(`${route(\"catalogo.nuevo.departamento\")}`, datos)\n        .then((response) => {\n            const { status, data } = response;\n            // setDataDetalle(response)\n            if (status == 201) {\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerDepartamentos()\n                \n            }\n        })\n        .finally(() => {\n            setLoader(false);\n        });\n        \n    }\n\n\n    // CRUD Clientes\n    const obtenerClientes = async () => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.list.clientes\")}`)\n            .then((response) => {\n                const { data } = response;\n                setData(data);\n            })\n            .finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const actualizarCliente = async (datos) => {\n        setLoader(true);\n        try {\n            const response = await axios.post(\n                `${route(\"catalogo.actualiza.cliente\")}`,\n                datos\n            );\n\n            const { status, data } = response;\n            \n            if (status === 201) {\n                // Mostrar mensaje de éxito\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerClientes();\n            } else {\n                // Mostrar mensaje de error si no es un código de éxito esperado\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error\",\n                    detail: `${data.error || \"Ocurrió un error inesperado\"}`,\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        } catch (error) {\n            if (error.response && error.response.status === 422) {\n                // Capturar errores de validación\n                const errores = error.response.data.errors;\n                const mensajes = Object.values(errores).flat().join(\", \"); // Combina los errores en una sola cadena\n\n                toast.current.show({\n                    severity: \"warn\",\n                    summary: \"Errores de validación\",\n                    detail: mensajes,\n                    life: 5000,\n                });\n            } else {\n                // Mostrar cualquier otro error\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error inesperado\",\n                    detail: \"Algo salió mal, por favor intente de nuevo.\",\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        }\n    };\n\n    const eliminarClientes = async (identy) => {\n        setLoader(true);\n        try {\n            await axios.delete(\n                `${route(\"catalogo.delete.cliente\", { id: identy })}`\n            );\n            toast.current.show({\n                severity: \"success\",\n                summary: \"cliente eliminado\",\n                detail: \"El cliente ha sido eliminado exitosamente.\",\n                life: 3000,\n            });\n            setLoader(false);\n            obtenerClientes();\n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo eliminar el cliente.\",\n                life: 3000,\n            });\n            setLoader(false);\n        }\n    };\n\n    const confirmarEliminacionClientes = (identy) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarEliminacion\n                    onConfirm={() => {\n                        eliminarClientes(identy);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n    const obtenerDetalleCliente = async (identy) => {\n        console.log(\"identy en obtenerDetalleCliente:\", identy); // Agrega este log\n        await axios\n            .get(`${route(\"catalogo.detalle.cliente\", { id: identy })}`)\n            .then((response) => {\n                console.log(\"datos cliente\", response);\n                setDataDetalle(response);\n            });\n    };\n\n    const nuevoCliente = async (datos) =>{\n        setLoader(true); \n        await axios\n        .post(`${route(\"catalogo.nuevo.cliente\")}`, datos)\n        .then((response) => {\n            const { status, data } = response;\n            // setDataDetalle(response)\n            if (status == 201) {\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerClientes();\n                \n            }\n        })\n        .finally(() => {\n            setLoader(false);\n        });\n        \n    }\n\n     // CRUD Unidades Medidas\n     const obtenerUnidadesMedidas = async () => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.list.unidadesmedidas\")}`)\n            .then((response) => {\n                const { data } = response;\n                setData(data);\n            }).finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const actualizarUnidadMedida = async (datos) => {\n        setLoader(true);        \n        try {\n            const response = await axios.post(\n                `${route(\"catalogo.actualiza.unidadmedida\")}`,\n                datos\n            );\n\n            const { status, data } = response;\n            \n            if (status === 201) {\n                // Mostrar mensaje de éxito\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerUnidadesMedidas();\n            } else {\n                // Mostrar mensaje de error si no es un código de éxito esperado\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error\",\n                    detail: `${data.error || \"Ocurrió un error inesperado\"}`,\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        } catch (error) {\n            if (error.response && error.response.status === 422) {\n                // Capturar errores de validación\n                const errores = error.response.data.errors;\n                const mensajes = Object.values(errores).flat().join(\", \"); // Combina los errores en una sola cadena\n\n                toast.current.show({\n                    severity: \"warn\",\n                    summary: \"Errores de validación\",\n                    detail: mensajes,\n                    life: 5000,\n                });\n            } else {\n                // Mostrar cualquier otro error\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error inesperado\",\n                    detail: \"Algo salió mal, por favor intente de nuevo.\",\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        }\n    };\n\n    const eliminarUnidadMedida = async (identy) => {\n        setLoader(true);\n        try {\n            await axios.delete(\n                `${route(\"catalogo.delete.unidadmedida\", { id: identy })}`\n            );\n            toast.current.show({\n                severity: \"success\",\n                summary: \"Unidad de Medida eliminado\",\n                detail: \"La Unidad de Medida ha sido eliminado exitosamente.\",\n                life: 3000,\n            });\n            setLoader(false);\n            obtenerUnidadesMedidas();\n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo eliminar el cliente.\",\n                life: 3000,\n            });\n            setLoader(false);\n        }\n    };\n\n    const confirmarEliminacionUnidadMedida = (identy) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarEliminacion\n                    onConfirm={() => {\n                        eliminarUnidadMedida(identy);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n    const obtenerDetalleUnidadMedida = async (identy) => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.detalle.unidadmedida\", { id: identy })}`)\n            .then((response) => {\n                setDataDetalle(response);\n            }).finally(() => {\n                setLoader(false);\n            });\n    };\n\n\n    const nuevoUnidadMedida = async (datos) =>{\n        setLoader(true); \n        await axios\n        .post(`${route(\"catalogo.nuevo.unidadmedida\")}`, datos)\n        .then((response) => {\n            const { status, data } = response;\n            // setDataDetalle(response)\n            if (status == 201) {\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerUnidadesMedidas();\n            }\n        })\n        .finally(() => {\n            setLoader(false);\n        });\n        \n    }\n\n    // CRUD Tipos de Monedas\n    const obtenerTiposMonedas = async () => {\n        \n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.list.tiposmonedas\")}`)\n            .then((response) => {\n                const { data } = response;\n                setData(data);\n            }).finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const actualizarTipoMoneda = async (datos) => {\n        setLoader(true);        \n        try {\n            const response = await axios.post(\n                `${route(\"catalogo.actualiza.tipomoneda\")}`,\n                datos\n            );\n\n            const { status, data } = response;\n            \n            if (status === 201) {\n                // Mostrar mensaje de éxito\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerTiposMonedas();\n            } else {\n                // Mostrar mensaje de error si no es un código de éxito esperado\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error\",\n                    detail: `${data.error || \"Ocurrió un error inesperado\"}`,\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        } catch (error) {\n            if (error.response && error.response.status === 422) {\n                // Capturar errores de validación\n                const errores = error.response.data.errors;\n                const mensajes = Object.values(errores).flat().join(\", \"); // Combina los errores en una sola cadena\n\n                toast.current.show({\n                    severity: \"warn\",\n                    summary: \"Errores de validación\",\n                    detail: mensajes,\n                    life: 5000,\n                });\n            } else {\n                // Mostrar cualquier otro error\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error inesperado\",\n                    detail: \"Algo salió mal, por favor intente de nuevo.\",\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        }\n    };\n\n    const eliminarTipoMoneda = async (identy) => {\n        setLoader(true);\n        try {\n            await axios.delete(\n                `${route(\"catalogo.delete.tipomoneda\", { id: identy })}`\n            );\n            toast.current.show({\n                severity: \"success\",\n                summary: \"Unidad de Medida eliminado\",\n                detail: \"El tipo de moneda ha sido eliminado exitosamente.\",\n                life: 3000,\n            });\n            setLoader(false);\n            obtenerTiposMonedas()\n            \n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo eliminar el tipo de moneda.\",\n                life: 3000,\n            });\n            setLoader(false);\n        }\n    };\n\n    const confirmarEliminacionTipoMoneda = (identy) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarEliminacion\n                    onConfirm={() => {\n                        eliminarTipoMoneda(identy);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n    const obtenerDetalleTipoMoneda = async (identy) => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.detalle.tipomoneda\", { id: identy })}`)\n            .then((response) => {\n                setDataDetalle(response);\n            }).finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const nuevoTipoMoneda = async (datos) =>{\n        setLoader(true); \n        await axios\n        .post(`${route(\"catalogo.nuevo.tipomoneda\")}`, datos)\n        .then((response) => {\n            const { status, data } = response;\n            // setDataDetalle(response)\n            if (status == 201) {\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerTiposMonedas();\n            }\n        })\n        .finally(() => {\n            setLoader(false);\n        });\n        \n    }\n\n    // CRUD Status\n    const obtenerStatus = async () => {\n    \n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.list.status\")}`)\n            .then((response) => {\n                const { data } = response;\n                setData(data);\n            }).finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const actualizarStatu = async (datos) => {\n        setLoader(true);        \n        try {\n            const response = await axios.post(\n                `${route(\"catalogo.actualiza.statu\")}`,\n                datos\n            );\n\n            const { status, data } = response;\n            \n            if (status === 201) {\n                // Mostrar mensaje de éxito\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerStatus();\n            } else {\n                // Mostrar mensaje de error si no es un código de éxito esperado\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error\",\n                    detail: `${data.error || \"Ocurrió un error inesperado\"}`,\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        } catch (error) {\n            if (error.response && error.response.status === 422) {\n                // Capturar errores de validación\n                const errores = error.response.data.errors;\n                const mensajes = Object.values(errores).flat().join(\", \"); // Combina los errores en una sola cadena\n\n                toast.current.show({\n                    severity: \"warn\",\n                    summary: \"Errores de validación\",\n                    detail: mensajes,\n                    life: 5000,\n                });\n            } else {\n                // Mostrar cualquier otro error\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error inesperado\",\n                    detail: \"Algo salió mal, por favor intente de nuevo.\",\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        }\n    };\n\n    const eliminarStatu = async (identy) => {\n        setLoader(true);\n        try {\n            await axios.delete(\n                `${route(\"catalogo.delete.statu\", { id: identy })}`\n            );\n            toast.current.show({\n                severity: \"success\",\n                summary: \"Unidad de Medida eliminado\",\n                detail: \"El tipo de moneda ha sido eliminado exitosamente.\",\n                life: 3000,\n            });\n            setLoader(false);\n            obtenerStatus();\n            \n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo eliminar el tipo de moneda.\",\n                life: 3000,\n            });\n            setLoader(false);\n        }\n    };\n\n    const confirmarEliminacionStatu = (identy) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarEliminacion\n                    onConfirm={() => {\n                        eliminarStatu(identy);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n    const obtenerDetalleStatu = async (identy) => {\n        setLoader(true);\n        await axios\n            .get(`${route(\"catalogo.detalle.statu\", { id: identy })}`)\n            .then((response) => {\n                setDataDetalle(response);\n            }).finally(() => {\n                setLoader(false);\n            });\n    };\n\n    const nuevoStatu = async (datos) =>{\n        \n        setLoader(true); \n        await axios\n        .post(`${route(\"catalogo.nuevo.statu\")}`, datos)\n        .then((response) => {\n            const { status, data } = response;\n            // setDataDetalle(response)\n            if (status == 201) {\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerStatus();\n                // obtenerTiposMonedas();\n            }\n        })\n        .finally(() => {\n            setLoader(false);\n        });\n        \n    }\n\n\n\n\n     // CRUD Usuarios\n     const obtenerUsuarios = async () => {\n        await axios\n            .get(`${route(\"catalogo.list.usuarios\")}`)\n            .then((response) => {\n                const { data } = response;\n                setData(data);\n            });\n    };\n\n    const obtenerDetalleUsuario = async (identy) => {\n        console.log(\"identy en obtenerDetalleUsuario:\", identy); // Agrega este log\n        await axios\n            .get(`${route(\"catalogo.detalle.usuario\", { id: identy })}`)\n            .then((response) => {\n                console.log(\"datos usuario\", response);\n                setDataDetalle(response);\n            });\n    };\n\n    const actualizarUsuario = async (datos) => {\n        setLoader(true);        \n        try {\n            const response = await axios.post(\n                `${route(\"catalogo.actualiza.unidadmedida\")}`,\n                datos\n            );\n\n            const { status, data } = response;\n            \n            if (status === 201) {\n                // Mostrar mensaje de éxito\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerUnidadesMedidas();\n            } else {\n                // Mostrar mensaje de error si no es un código de éxito esperado\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error\",\n                    detail: `${data.error || \"Ocurrió un error inesperado\"}`,\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        } catch (error) {\n            if (error.response && error.response.status === 422) {\n                // Capturar errores de validación\n                const errores = error.response.data.errors;\n                const mensajes = Object.values(errores).flat().join(\", \"); // Combina los errores en una sola cadena\n\n                toast.current.show({\n                    severity: \"warn\",\n                    summary: \"Errores de validación\",\n                    detail: mensajes,\n                    life: 5000,\n                });\n            } else {\n                // Mostrar cualquier otro error\n                toast.current.show({\n                    severity: \"error\",\n                    summary: \"Error inesperado\",\n                    detail: \"Algo salió mal, por favor intente de nuevo.\",\n                    life: 3000,\n                });\n            }\n            setLoader(false);\n        }\n    };\n\n    const eliminarUsuario = async (identy) => {\n        setLoader(true);\n        try {\n            await axios.delete(\n                `${route(\"catalogo.delete.unidadmedida\", { id: identy })}`\n            );\n            toast.current.show({\n                severity: \"success\",\n                summary: \"Unidad de Medida eliminado\",\n                detail: \"La Unidad de Medida ha sido eliminado exitosamente.\",\n                life: 3000,\n            });\n            setLoader(false);\n            obtenerUnidadesMedidas();\n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo eliminar el cliente.\",\n                life: 3000,\n            });\n            setLoader(false);\n        }\n    };\n\n    const confirmarEliminacionUsuario= (identy) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarEliminacion\n                    onConfirm={() => {\n                        eliminarUnidadMedida(identy);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n    const nuevoUsuario = async (datos) =>{\n        setLoader(true); \n        await axios\n        .post(`${route(\"catalogo.nuevo.unidadmedida\")}`, datos)\n        .then((response) => {\n            const { status, data } = response;\n            // setDataDetalle(response)\n            if (status == 201) {\n                toast.current.show({\n                    severity: \"success\",\n                    summary: \"Success\",\n                    detail: `${data.success}`,\n                    life: 3000,\n                });\n                showTabla();\n                obtenerUnidadesMedidas();\n            }\n        })\n        .finally(() => {\n            setLoader(false);\n        });\n        \n    }\n\n\n\n// ____________________\n    // CRUD Empresa\n    // const obtenerEmpresa = async () => {\n    //     await axios\n    //         .get(`${route(\"catalogo.list.empresas\")}`)\n    //         .then((response) => {\n    //             const { data } = response;\n    //             setData(data);\n    //         });\n    // };\n\n    // const obtenerDetalleEmpresa = async (identy) => {\n    //     await axios\n    //         .get(`${route(\"catalogo.detalle.empresa\", { id: identy })}`)\n    //         .then((response) => {\n    //             console.log(\"datos empresa\", response);\n    //             setDataDetalle(response);\n    //         });\n    // };\n\n\n   \n   \n\n    // obtenerDetalleCliente\n\n\n    //aqui vamos a ver que formularios vamos a mostrar segun se seleccione\n    const showAgregar = () => {\n        \n        setLimpiarFormulario(true)\n        setOcultarFormulario(false);\n        setOcultarTabla(true);\n        setModoForm('Guardar')\n    };\n\n    const showTabla = () => {\n        setOcultarFormulario(true);\n        setOcultarTabla(false);\n    };\n\n    const eliminarProvedor = async (identy) => {\n        \n        try {\n            await axios.delete(\n                `${route(\"catalogo.delete.provedor\", { id: identy })}`\n            );\n            toast.current.show({\n                severity: \"success\",\n                summary: \"Proveedor eliminado\",\n                detail: \"El proveedor ha sido eliminado exitosamente.\",\n                life: 3000,\n            });\n            obtenerProvedores();\n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo eliminar el proveedor.\",\n                life: 3000,\n            });\n        }\n    };\n\n    // Función para mostrar el mensaje de confirmación\n    const confirmarEliminacion = (identy) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarEliminacion\n                    onConfirm={() => {\n                        eliminarProvedor(identy);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n    const eliminarDepertamento = async (identy) => {\n        console.log(\"identy en eliminarDepertamento:\", identy);\n        try {\n            await axios.delete(\n                `${route(\"catalogo.delete.departamento\", { id: identy })}`\n            );\n            toast.current.show({\n                severity: \"success\",\n                summary: \"departamento eliminado\",\n                detail: \"El departamento ha sido eliminado exitosamente.\",\n                life: 3000,\n            });\n            obtenerDepartamentos();\n        } catch (error) {\n            toast.current.show({\n                severity: \"error\",\n                summary: \"Error\",\n                detail: \"No se pudo eliminar el departamento.\",\n                life: 3000,\n            });\n        }\n    };\n\n    const confirmarEliminacionDepartamento = (identy) => {\n        toast.current.show({\n            severity: \"warn\",\n            summary: \"Confirmación\",\n            sticky: true,\n            content: (\n                <ConfirmarEliminacion\n                    onConfirm={() => {\n                        eliminarDepertamento(identy);\n                        toast.current.clear();\n                    }}\n                    onCancel={() => toast.current.clear()}\n                />\n            ),\n        });\n    };\n\n  \n\n    return (\n        <Dialog\n            header={titulo}\n            visible={visible}\n            style={{ width: \"65vw\" }}\n            onHide={() => {\n                if (!visible) return;\n                setVisible(false);\n            }}\n        >\n            <Card>\n                {/* Aqui se van a manejar todos los datos  */}\n                {ocultarTabla == false && (\n                    <TablasCatalogos\n                        opMostrar={tpOperacion} // Esta es la operacion\n                        data={data}\n                        eliminar={eliminiarRegistro}\n                        shoAgregar={showAgregar}\n                        updateRegistro={updateRegistro}\n                    />\n                )}\n\n                {/* // Aqui se tienen que mostrar los formulario segun lo seleccionado  con toas */}\n                {tpOperacion === \"provedores\" && ocultarFormulario == false && (\n                    <FormularioProvedor\n                        showTabla={showTabla}\n                        dataDetalle={dataDetalle}\n                        actualizarProvedor={actualizarProvedor}\n                        limpiarFormulario = {limpiarFormulario}\n                        setLimpiarFormulario  = {setLimpiarFormulario}\n                        modoForm={modoForm}\n                        nuevoProvedor={nuevoProvedor}\n\n                    />\n                )}\n\n                {tpOperacion === \"departamentos\" && ocultarFormulario == false && (\n                        <FormularioDepartamento\n                            showTabla={showTabla}\n                            dataDetalle={dataDetalle}\n                            actualizarDepartamento={actualizarDepartamento}\n                            limpiarFormulario = {limpiarFormulario}\n                            modoForm={modoForm}\n                            nuevoDepartamento={nuevoDepartamento}\n                        />\n                    )}\n\n                {tpOperacion === \"clientes\" && ocultarFormulario == false && (\n                    <FormularioClientes\n                        showTabla={showTabla}\n                        dataDetalle={dataDetalle}\n                        actualizarCliente={actualizarCliente}\n                        limpiarFormulario = {limpiarFormulario}\n                        setLimpiarFormulario  = {setLimpiarFormulario}\n                        modoForm={modoForm}\n                        nuevoCliente={nuevoCliente}\n                    />\n                )}\n\n                {tpOperacion === \"unidadesMedidas\" && ocultarFormulario == false && (\n                    <FormularioUnidadMedida\n                        showTabla={showTabla}\n                        dataDetalle={dataDetalle}\n                        actualizarUnidadMedida={actualizarUnidadMedida}\n                        limpiarFormulario = {limpiarFormulario}\n                        setLimpiarFormulario  = {setLimpiarFormulario}\n                        modoForm={modoForm}\n                        nuevoUnidadMedida={nuevoUnidadMedida}\n                    />\n                )}\n\n                {tpOperacion === \"tiposMonedas\" && ocultarFormulario == false && (\n                    <FormularioMoneda\n                        showTabla={showTabla}\n                        dataDetalle={dataDetalle}\n                        actualizarTipoMoneda = {actualizarTipoMoneda}\n                        limpiarFormulario = {limpiarFormulario}\n                        setLimpiarFormulario  = {setLimpiarFormulario}\n                        modoForm={modoForm}\n                        nuevoTipoMoneda={nuevoTipoMoneda}///esto\n                    />\n                )}\n\n                {tpOperacion === \"tiposStatus\" && ocultarFormulario == false && (\n                    <FormularioStatus\n                        showTabla={showTabla}\n                        dataDetalle={dataDetalle}\n                        actualizarStatu = {actualizarStatu}\n                        limpiarFormulario = {limpiarFormulario}\n                        setLimpiarFormulario  = {setLimpiarFormulario}\n                        modoForm={modoForm}\n                        nuevoStatu={nuevoStatu}\n                        \n                    />\n                )}\n\n                {tpOperacion === \"usuarios\" && ocultarFormulario == false && (\n                    <FormularioUsuario\n                        showTabla={showTabla}\n                        dataDetalle={dataDetalle}\n                    />\n                )}\n\n                {tpOperacion === \"datosEmpresa\" &&\n                    ocultarFormulario == false && (\n                        <FormularioEmpresa\n                            showTabla={showTabla}\n                            dataDetalle={dataDetalle}\n                        />\n                    )}\n                {loader && (\n                    <div className=\"flex justify-content-center\">\n                        <ProgressSpinner style={{width: '50px', height: '50px'}} strokeWidth=\"8\" fill=\"var(--surface-ground)\" animationDuration=\".5s\" />\n                    </div>\n                )}\n                <Toast ref={toast} />\n            </Card>\n        </Dialog>\n    );\n}\n"],"names":["DialogoCat","tpOperacion","setOperacion","visible","setVisible","useState","titulo","setTitulo","data","setData","dataDetalle","setDataDetalle","limpiarFormulario","setLimpiarFormulario","modoForm","setModoForm","loader","setLoader","ocultarTabla","setOcultarTabla","ocultarFormulario","setOcultarFormulario","toast","useRef","useEffect","obtenerProvedores","obtenerDepartamentos","obtenerUnidadesMedidas","obtenerTiposMonedas","obtenerStatus","eliminiarRegistro","identy","confirmarEliminacion","confirmarEliminacionDepartamento","confirmarEliminacionClientes","confirmarEliminacionUnidadMedida","confirmarEliminacionTipoMoneda","confirmarEliminacionStatu","updateRegistro","obtenerDetalleProvedor","obtenerDetalleDepartamento","obtenerDetalleCliente","obtenerDetalleUnidadMedida","obtenerDetalleTipoMoneda","obtenerDetalleStatu","response","actualizarProvedor","datos","status","showTabla","nuevoProvedor","actualizarDepartamento","error","nuevoDepartamento","obtenerClientes","actualizarCliente","errores","mensajes","eliminarClientes","jsx","ConfirmarEliminacion","nuevoCliente","actualizarUnidadMedida","eliminarUnidadMedida","nuevoUnidadMedida","actualizarTipoMoneda","eliminarTipoMoneda","nuevoTipoMoneda","actualizarStatu","eliminarStatu","nuevoStatu","showAgregar","eliminarProvedor","eliminarDepertamento","Dialog","Card","TablasCatalogos","FormularioProvedor","FormularioDepartamento","FormularioClientes","FormularioUnidadMedida","FormularioMoneda","FormularioStatus","FormularioUsuario","FormularioEmpresa","ProgressSpinner","Toast"],"mappings":"0+CAiBA,SAAwBA,GAAW,CAAE,YAAAC,EAAa,aAAAC,GAAgB,CAC9D,KAAM,CAACC,EAASC,CAAU,EAAIC,WAAS,EAAK,EACtC,CAACC,EAAQC,CAAS,EAAIF,WAAS,EAAE,EACjC,CAACG,EAAMC,CAAO,EAAIJ,EAAA,SAAS,CAAE,CAAA,EAC7B,CAACK,EAAaC,CAAc,EAAIN,EAAA,SAAS,CAAE,CAAA,EAC3C,CAACO,EAAmBC,CAAoB,EAAIR,WAAS,EAAK,EAC1D,CAACS,EAAUC,CAAW,EAAIV,WAAS,SAAS,EAC5C,CAACW,EAAQC,CAAS,EAAIZ,WAAS,EAAK,EAEpC,CAACa,EAAcC,CAAe,EAAId,WAAS,EAAK,EAChD,CAACe,EAAmBC,CAAoB,EAAIhB,WAAS,EAAI,EACzDiB,EAAQC,SAAO,IAAI,EAEzBC,EAAAA,UAAU,IAAM,CAMZ,OALAP,EAAU,EAAI,EACdI,EAAqB,EAAI,EACzBF,EAAgB,EAAK,EACb,QAAA,IAAI,UAAWlB,CAAW,EAE1BA,EAAa,CACjB,IAAK,aACDG,EAAW,EAAI,EACGqB,IAClBlB,EAAU,wBAAwB,EAClC,MACJ,IAAK,gBACDH,EAAW,EAAI,EACMsB,IACrBnB,EAAU,2BAA2B,EACrC,MAMJ,IAAK,kBACDA,EAAU,gCAAgC,EACnBoB,IACvBvB,EAAW,EAAI,EACf,MACJ,IAAK,eACDG,EAAU,8BAA8B,EACpBqB,IACpBxB,EAAW,EAAI,EACf,MACJ,IAAK,cACDG,EAAU,oBAAoB,EAChBsB,IACdzB,EAAW,EAAI,EACf,MAMJ,IAAK,WAID,MAIJ,IAAK,eACDG,EAAU,qBAAqB,EAChB,iBACfH,EAAW,EAAI,EACf,MACJ,QACIG,EAAU,EAAE,EACZH,EAAW,EAAK,EAChBF,EAAa,IAAI,EACjB,KACR,CAAA,EACD,CAACD,CAAW,CAAC,EAEV,MAAA6B,EAAoB,MAAOC,GAAW,CAGxC,OAFQ,QAAA,IAAI,oBAAqBA,EAAO9B,CAAW,EAE3CA,EAAa,CACjB,IAAK,aACD,MAAM+B,GAAqBD,CAAM,EACjC,MACJ,IAAK,gBACD,MAAME,GAAiCF,CAAM,EAC7C,MACJ,IAAK,WACD,MAAMG,EAA6BH,CAAM,EACzC,MACJ,IAAK,kBACD,MAAMI,EAAiCJ,CAAM,EAC7C,MACJ,IAAK,eACD,MAAMK,GAA+BL,CAAM,EAC3C,MACJ,IAAK,cACD,MAAMM,GAA0BN,CAAM,EACtC,MAWJ,QACIxB,EAAU,EAAE,EACZH,EAAW,EAAK,EAChBF,EAAa,IAAI,EACjB,KACR,CAAA,EAIEoC,EAAkBP,GAAW,CAC/B,OAAQ9B,EAAa,CACjB,IAAK,aACDsC,EAAuBR,CAAM,EAC7B,MACJ,IAAK,gBACDS,EAA2BT,CAAM,EACjC,MACJ,IAAK,WACDU,EAAsBV,CAAM,EAC5B,MACJ,IAAK,kBACDW,EAA2BX,CAAM,EACjC,MACJ,IAAK,eACDY,GAAyBZ,CAAM,EAC/B,MACJ,IAAK,cACDa,GAAoBb,CAAM,EAC1B,KAUR,CAEAlB,EAAqB,EAAK,EAC1BQ,EAAqB,EAAK,EAC1BF,EAAgB,EAAI,EACpBJ,EAAY,YAAY,CAAA,EAQtBU,EAAoB,SAAY,CAClCR,EAAU,EAAI,EACR,MAAA,MACD,IAAI,GAAG,MAAM,0BAA0B,CAAC,EAAE,EAC1C,KAAM4B,GAAa,CACV,KAAA,CAAE,KAAArC,CAAS,EAAAqC,EACjBpC,EAAQD,CAAI,EACZS,EAAU,EAAI,CAAA,CACjB,EACA,QAAQ,IAAI,CACTA,EAAU,EAAK,CAAA,CAClB,CAAA,EAEHsB,EAAyB,MAAOR,GAAW,CAC7Cd,EAAU,EAAI,EACd,MAAM,MACD,IAAI,GAAG,MAAM,6BAA8B,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAE,EAC5D,KAAMc,GAAa,CAChBlC,EAAekC,CAAQ,CAAA,CAC1B,EACA,QAAQ,IAAI,CACT5B,EAAU,EAAK,CAAA,CAClB,CAAA,EAGH6B,EAAqB,MAAOC,GAAU,CACxC9B,EAAU,EAAI,EACR,MAAA,MACD,KAAK,GAAG,MAAM,6BAA6B,CAAC,GAAI8B,CAAK,EACrD,KAAMF,GAAa,CAChB,KAAM,CAAE,OAAAG,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,GAAU,MACV1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACQxB,IACtB,CACH,EACA,QAAQ,IAAM,CACXR,EAAU,EAAK,CAAA,CAClB,CAAA,EAGHiC,EAAgB,MAAOH,GAAS,CAClC9B,EAAU,EAAI,EACR,MAAA,MACL,KAAK,GAAG,MAAM,yBAAyB,CAAC,GAAI8B,CAAK,EACjD,KAAMF,GAAa,CAChB,KAAM,CAAE,OAAAG,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,GAAU,MACV1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACQxB,IACtB,CACH,EACA,QAAQ,IAAM,CACXR,EAAU,EAAK,CAAA,CAClB,CAAA,EAQCS,EAAuB,SAAY,CACrCT,EAAU,EAAI,EACR,MAAA,MACD,IAAI,GAAG,MAAM,6BAA6B,CAAC,EAAE,EAC7C,KAAM4B,GAAa,CACV,KAAA,CAAE,KAAArC,CAAS,EAAAqC,EACjBpC,EAAQD,CAAI,CAAA,CACf,EACD,QAAQ,IAAM,CACVS,EAAU,EAAK,CAAA,CAClB,CAAA,EAGHuB,EAA6B,MAAOT,GAAW,CACjDd,EAAU,EAAI,EACd,MAAM,MACD,IAAI,GAAG,MAAM,gCAAiC,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAE,EAC/D,KAAMc,GAAa,CACR,QAAA,IAAI,qBAAsBA,CAAQ,EAC1ClC,EAAekC,CAAQ,CAAA,CAC1B,EACD,QAAQ,IAAM,CACV5B,EAAU,EAAK,CAAA,CAClB,CAAA,EAGHkC,EAAyB,MAAOJ,GAAU,CAC5C9B,EAAU,EAAI,EACV,GAAA,CACM,MAAA4B,EAAW,MAAM,MAAM,KACzB,GAAG,MAAM,iCAAiC,CAAC,GAC3CE,CAAA,EAGE,CAAE,OAAAC,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,IAAW,MACX1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EAGSyC,IACWvB,IACrBT,EAAU,EAAK,SAEdmC,EAAO,CACJ,QAAA,MAAM,sCAAuCA,CAAK,EAC1DnC,EAAU,EAAK,EACfK,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,kDACR,KAAM,GAAA,CACT,CACL,CAAA,EAGE+B,EAAoB,MAAON,GAAS,CACtC9B,EAAU,EAAI,EACR,MAAA,MACL,KAAK,GAAG,MAAM,6BAA6B,CAAC,GAAI8B,CAAK,EACrD,KAAMF,GAAa,CAChB,KAAM,CAAE,OAAAG,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,GAAU,MACV1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACWvB,IAEzB,CACH,EACA,QAAQ,IAAM,CACXT,EAAU,EAAK,CAAA,CAClB,CAAA,EAMCqC,EAAkB,SAAY,CAChCrC,EAAU,EAAI,EACR,MAAA,MACD,IAAI,GAAG,MAAM,wBAAwB,CAAC,EAAE,EACxC,KAAM4B,GAAa,CACV,KAAA,CAAE,KAAArC,CAAS,EAAAqC,EACjBpC,EAAQD,CAAI,CAAA,CACf,EACA,QAAQ,IAAM,CACXS,EAAU,EAAK,CAAA,CAClB,CAAA,EAGHsC,EAAoB,MAAOR,GAAU,CACvC9B,EAAU,EAAI,EACV,GAAA,CACM,MAAA4B,EAAW,MAAM,MAAM,KACzB,GAAG,MAAM,4BAA4B,CAAC,GACtCE,CAAA,EAGE,CAAE,OAAAC,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,IAAW,KAEX1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACMK,KAGhBhC,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,GAAGd,EAAK,OAAS,6BAA6B,GACtD,KAAM,GAAA,CACT,EAELS,EAAU,EAAK,QACVmC,EAAO,CACZ,GAAIA,EAAM,UAAYA,EAAM,SAAS,SAAW,IAAK,CAE3C,MAAAI,EAAUJ,EAAM,SAAS,KAAK,OAC9BK,EAAW,OAAO,OAAOD,CAAO,EAAE,KAAK,EAAE,KAAK,IAAI,EAExDlC,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,wBACT,OAAQmC,EACR,KAAM,GAAA,CACT,CAAA,MAGDnC,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,mBACT,OAAQ,8CACR,KAAM,GAAA,CACT,EAELL,EAAU,EAAK,CACnB,CAAA,EAGEyC,EAAmB,MAAO3B,GAAW,CACvCd,EAAU,EAAI,EACV,GAAA,CACA,MAAM,MAAM,OACR,GAAG,MAAM,0BAA2B,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAA,EAEvDT,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,oBACT,OAAQ,6CACR,KAAM,GAAA,CACT,EACDL,EAAU,EAAK,EACCqC,SACJ,CACZhC,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,kCACR,KAAM,GAAA,CACT,EACDL,EAAU,EAAK,CACnB,CAAA,EAGEiB,EAAgCH,GAAW,CAC7CT,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,eACT,OAAQ,GACR,QACIqC,EAAA,IAACC,EAAA,CACG,UAAW,IAAM,CACbF,EAAiB3B,CAAM,EACvBT,EAAM,QAAQ,OAClB,EACA,SAAU,IAAMA,EAAM,QAAQ,MAAM,CAAA,CACxC,CAAA,CAEP,CAAA,EAGCmB,EAAwB,MAAOV,GAAW,CACpC,QAAA,IAAI,mCAAoCA,CAAM,EACtD,MAAM,MACD,IAAI,GAAG,MAAM,2BAA4B,CAAE,GAAIA,CAAQ,CAAA,CAAC,EAAE,EAC1D,KAAMc,GAAa,CACR,QAAA,IAAI,gBAAiBA,CAAQ,EACrClC,EAAekC,CAAQ,CAAA,CAC1B,CAAA,EAGHgB,EAAe,MAAOd,GAAS,CACjC9B,EAAU,EAAI,EACR,MAAA,MACL,KAAK,GAAG,MAAM,wBAAwB,CAAC,GAAI8B,CAAK,EAChD,KAAMF,GAAa,CAChB,KAAM,CAAE,OAAAG,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,GAAU,MACV1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACMK,IAEpB,CACH,EACA,QAAQ,IAAM,CACXrC,EAAU,EAAK,CAAA,CAClB,CAAA,EAKEU,EAAyB,SAAY,CACxCV,EAAU,EAAI,EACR,MAAA,MACD,IAAI,GAAG,MAAM,+BAA+B,CAAC,EAAE,EAC/C,KAAM4B,GAAa,CACV,KAAA,CAAE,KAAArC,CAAS,EAAAqC,EACjBpC,EAAQD,CAAI,CAAA,CACf,EAAE,QAAQ,IAAM,CACbS,EAAU,EAAK,CAAA,CAClB,CAAA,EAGH6C,EAAyB,MAAOf,GAAU,CAC5C9B,EAAU,EAAI,EACV,GAAA,CACM,MAAA4B,EAAW,MAAM,MAAM,KACzB,GAAG,MAAM,iCAAiC,CAAC,GAC3CE,CAAA,EAGE,CAAE,OAAAC,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,IAAW,KAEX1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACatB,KAGvBL,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,GAAGd,EAAK,OAAS,6BAA6B,GACtD,KAAM,GAAA,CACT,EAELS,EAAU,EAAK,QACVmC,EAAO,CACZ,GAAIA,EAAM,UAAYA,EAAM,SAAS,SAAW,IAAK,CAE3C,MAAAI,EAAUJ,EAAM,SAAS,KAAK,OAC9BK,EAAW,OAAO,OAAOD,CAAO,EAAE,KAAK,EAAE,KAAK,IAAI,EAExDlC,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,wBACT,OAAQmC,EACR,KAAM,GAAA,CACT,CAAA,MAGDnC,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,mBACT,OAAQ,8CACR,KAAM,GAAA,CACT,EAELL,EAAU,EAAK,CACnB,CAAA,EAGE8C,EAAuB,MAAOhC,GAAW,CAC3Cd,EAAU,EAAI,EACV,GAAA,CACA,MAAM,MAAM,OACR,GAAG,MAAM,+BAAgC,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAA,EAE5DT,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,6BACT,OAAQ,sDACR,KAAM,GAAA,CACT,EACDL,EAAU,EAAK,EACQU,SACX,CACZL,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,kCACR,KAAM,GAAA,CACT,EACDL,EAAU,EAAK,CACnB,CAAA,EAGEkB,EAAoCJ,GAAW,CACjDT,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,eACT,OAAQ,GACR,QACIqC,EAAA,IAACC,EAAA,CACG,UAAW,IAAM,CACbG,EAAqBhC,CAAM,EAC3BT,EAAM,QAAQ,OAClB,EACA,SAAU,IAAMA,EAAM,QAAQ,MAAM,CAAA,CACxC,CAAA,CAEP,CAAA,EAGCoB,EAA6B,MAAOX,GAAW,CACjDd,EAAU,EAAI,EACd,MAAM,MACD,IAAI,GAAG,MAAM,gCAAiC,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAE,EAC/D,KAAMc,GAAa,CAChBlC,EAAekC,CAAQ,CAAA,CAC1B,EAAE,QAAQ,IAAM,CACb5B,EAAU,EAAK,CAAA,CAClB,CAAA,EAIH+C,EAAoB,MAAOjB,GAAS,CACtC9B,EAAU,EAAI,EACR,MAAA,MACL,KAAK,GAAG,MAAM,6BAA6B,CAAC,GAAI8B,CAAK,EACrD,KAAMF,GAAa,CAChB,KAAM,CAAE,OAAAG,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,GAAU,MACV1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACatB,IAC3B,CACH,EACA,QAAQ,IAAM,CACXV,EAAU,EAAK,CAAA,CAClB,CAAA,EAKCW,EAAsB,SAAY,CAEpCX,EAAU,EAAI,EACR,MAAA,MACD,IAAI,GAAG,MAAM,4BAA4B,CAAC,EAAE,EAC5C,KAAM4B,GAAa,CACV,KAAA,CAAE,KAAArC,CAAS,EAAAqC,EACjBpC,EAAQD,CAAI,CAAA,CACf,EAAE,QAAQ,IAAM,CACbS,EAAU,EAAK,CAAA,CAClB,CAAA,EAGHgD,EAAuB,MAAOlB,GAAU,CAC1C9B,EAAU,EAAI,EACV,GAAA,CACM,MAAA4B,EAAW,MAAM,MAAM,KACzB,GAAG,MAAM,+BAA+B,CAAC,GACzCE,CAAA,EAGE,CAAE,OAAAC,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,IAAW,KAEX1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACUrB,KAGpBN,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,GAAGd,EAAK,OAAS,6BAA6B,GACtD,KAAM,GAAA,CACT,EAELS,EAAU,EAAK,QACVmC,EAAO,CACZ,GAAIA,EAAM,UAAYA,EAAM,SAAS,SAAW,IAAK,CAE3C,MAAAI,EAAUJ,EAAM,SAAS,KAAK,OAC9BK,EAAW,OAAO,OAAOD,CAAO,EAAE,KAAK,EAAE,KAAK,IAAI,EAExDlC,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,wBACT,OAAQmC,EACR,KAAM,GAAA,CACT,CAAA,MAGDnC,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,mBACT,OAAQ,8CACR,KAAM,GAAA,CACT,EAELL,EAAU,EAAK,CACnB,CAAA,EAGEiD,GAAqB,MAAOnC,GAAW,CACzCd,EAAU,EAAI,EACV,GAAA,CACA,MAAM,MAAM,OACR,GAAG,MAAM,6BAA8B,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAA,EAE1DT,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,6BACT,OAAQ,oDACR,KAAM,GAAA,CACT,EACDL,EAAU,EAAK,EACKW,SAER,CACZN,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,yCACR,KAAM,GAAA,CACT,EACDL,EAAU,EAAK,CACnB,CAAA,EAGEmB,GAAkCL,GAAW,CAC/CT,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,eACT,OAAQ,GACR,QACIqC,EAAA,IAACC,EAAA,CACG,UAAW,IAAM,CACbM,GAAmBnC,CAAM,EACzBT,EAAM,QAAQ,OAClB,EACA,SAAU,IAAMA,EAAM,QAAQ,MAAM,CAAA,CACxC,CAAA,CAEP,CAAA,EAGCqB,GAA2B,MAAOZ,GAAW,CAC/Cd,EAAU,EAAI,EACd,MAAM,MACD,IAAI,GAAG,MAAM,8BAA+B,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAE,EAC7D,KAAMc,GAAa,CAChBlC,EAAekC,CAAQ,CAAA,CAC1B,EAAE,QAAQ,IAAM,CACb5B,EAAU,EAAK,CAAA,CAClB,CAAA,EAGHkD,GAAkB,MAAOpB,GAAS,CACpC9B,EAAU,EAAI,EACR,MAAA,MACL,KAAK,GAAG,MAAM,2BAA2B,CAAC,GAAI8B,CAAK,EACnD,KAAMF,GAAa,CAChB,KAAM,CAAE,OAAAG,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,GAAU,MACV1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACUrB,IACxB,CACH,EACA,QAAQ,IAAM,CACXX,EAAU,EAAK,CAAA,CAClB,CAAA,EAKCY,EAAgB,SAAY,CAE9BZ,EAAU,EAAI,EACR,MAAA,MACD,IAAI,GAAG,MAAM,sBAAsB,CAAC,EAAE,EACtC,KAAM4B,GAAa,CACV,KAAA,CAAE,KAAArC,CAAS,EAAAqC,EACjBpC,EAAQD,CAAI,CAAA,CACf,EAAE,QAAQ,IAAM,CACbS,EAAU,EAAK,CAAA,CAClB,CAAA,EAGHmD,GAAkB,MAAOrB,GAAU,CACrC9B,EAAU,EAAI,EACV,GAAA,CACM,MAAA4B,EAAW,MAAM,MAAM,KACzB,GAAG,MAAM,0BAA0B,CAAC,GACpCE,CAAA,EAGE,CAAE,OAAAC,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,IAAW,KAEX1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACIpB,KAGdP,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,GAAGd,EAAK,OAAS,6BAA6B,GACtD,KAAM,GAAA,CACT,EAELS,EAAU,EAAK,QACVmC,EAAO,CACZ,GAAIA,EAAM,UAAYA,EAAM,SAAS,SAAW,IAAK,CAE3C,MAAAI,EAAUJ,EAAM,SAAS,KAAK,OAC9BK,EAAW,OAAO,OAAOD,CAAO,EAAE,KAAK,EAAE,KAAK,IAAI,EAExDlC,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,wBACT,OAAQmC,EACR,KAAM,GAAA,CACT,CAAA,MAGDnC,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,mBACT,OAAQ,8CACR,KAAM,GAAA,CACT,EAELL,EAAU,EAAK,CACnB,CAAA,EAGEoD,GAAgB,MAAOtC,GAAW,CACpCd,EAAU,EAAI,EACV,GAAA,CACA,MAAM,MAAM,OACR,GAAG,MAAM,wBAAyB,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAA,EAErDT,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,6BACT,OAAQ,oDACR,KAAM,GAAA,CACT,EACDL,EAAU,EAAK,EACDY,SAEF,CACZP,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,yCACR,KAAM,GAAA,CACT,EACDL,EAAU,EAAK,CACnB,CAAA,EAGEoB,GAA6BN,GAAW,CAC1CT,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,eACT,OAAQ,GACR,QACIqC,EAAA,IAACC,EAAA,CACG,UAAW,IAAM,CACbS,GAActC,CAAM,EACpBT,EAAM,QAAQ,OAClB,EACA,SAAU,IAAMA,EAAM,QAAQ,MAAM,CAAA,CACxC,CAAA,CAEP,CAAA,EAGCsB,GAAsB,MAAOb,GAAW,CAC1Cd,EAAU,EAAI,EACd,MAAM,MACD,IAAI,GAAG,MAAM,yBAA0B,CAAE,GAAIc,CAAQ,CAAA,CAAC,EAAE,EACxD,KAAMc,GAAa,CAChBlC,EAAekC,CAAQ,CAAA,CAC1B,EAAE,QAAQ,IAAM,CACb5B,EAAU,EAAK,CAAA,CAClB,CAAA,EAGHqD,GAAa,MAAOvB,GAAS,CAE/B9B,EAAU,EAAI,EACR,MAAA,MACL,KAAK,GAAG,MAAM,sBAAsB,CAAC,GAAI8B,CAAK,EAC9C,KAAMF,GAAa,CAChB,KAAM,CAAE,OAAAG,EAAQ,KAAAxC,CAAAA,EAASqC,EAErBG,GAAU,MACV1B,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,UACT,OAAQ,GAAGd,EAAK,OAAO,GACvB,KAAM,GAAA,CACT,EACSyC,IACIpB,IAElB,CACH,EACA,QAAQ,IAAM,CACXZ,EAAU,EAAK,CAAA,CAClB,CAAA,EAkLCsD,GAAc,IAAM,CAEtB1D,EAAqB,EAAI,EACzBQ,EAAqB,EAAK,EAC1BF,EAAgB,EAAI,EACpBJ,EAAY,SAAS,CAAA,EAGnBkC,EAAY,IAAM,CACpB5B,EAAqB,EAAI,EACzBF,EAAgB,EAAK,CAAA,EAGnBqD,GAAmB,MAAOzC,GAAW,CAEnC,GAAA,CACA,MAAM,MAAM,OACR,GAAG,MAAM,2BAA4B,CAAE,GAAIA,CAAQ,CAAA,CAAC,EAAA,EAExDT,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,sBACT,OAAQ,+CACR,KAAM,GAAA,CACT,EACiBG,SACN,CACZH,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,oCACR,KAAM,GAAA,CACT,CACL,CAAA,EAIEU,GAAwBD,GAAW,CACrCT,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,eACT,OAAQ,GACR,QACIqC,EAAA,IAACC,EAAA,CACG,UAAW,IAAM,CACbY,GAAiBzC,CAAM,EACvBT,EAAM,QAAQ,OAClB,EACA,SAAU,IAAMA,EAAM,QAAQ,MAAM,CAAA,CACxC,CAAA,CAEP,CAAA,EAGCmD,GAAuB,MAAO1C,GAAW,CACnC,QAAA,IAAI,kCAAmCA,CAAM,EACjD,GAAA,CACA,MAAM,MAAM,OACR,GAAG,MAAM,+BAAgC,CAAE,GAAIA,CAAQ,CAAA,CAAC,EAAA,EAE5DT,EAAM,QAAQ,KAAK,CACf,SAAU,UACV,QAAS,yBACT,OAAQ,kDACR,KAAM,GAAA,CACT,EACoBI,SACT,CACZJ,EAAM,QAAQ,KAAK,CACf,SAAU,QACV,QAAS,QACT,OAAQ,uCACR,KAAM,GAAA,CACT,CACL,CAAA,EAGEW,GAAoCF,GAAW,CACjDT,EAAM,QAAQ,KAAK,CACf,SAAU,OACV,QAAS,eACT,OAAQ,GACR,QACIqC,EAAA,IAACC,EAAA,CACG,UAAW,IAAM,CACba,GAAqB1C,CAAM,EAC3BT,EAAM,QAAQ,OAClB,EACA,SAAU,IAAMA,EAAM,QAAQ,MAAM,CAAA,CACxC,CAAA,CAEP,CAAA,EAMD,OAAAqC,EAAA,IAACe,GAAA,CACG,OAAQpE,EACR,QAAAH,EACA,MAAO,CAAE,MAAO,MAAO,EACvB,OAAQ,IAAM,CACLA,GACLC,EAAW,EAAK,CACpB,EAEA,gBAACuE,GAEI,CAAA,SAAA,CAAAzD,GAAgB,IACbyC,EAAA,IAACiB,GAAA,CACG,UAAW3E,EACX,KAAAO,EACA,SAAUsB,EACV,WAAYyC,GACZ,eAAAjC,CAAA,CACJ,EAIHrC,IAAgB,cAAgBmB,GAAqB,IAClDuC,EAAA,IAACkB,GAAA,CACG,UAAA5B,EACA,YAAAvC,EACA,mBAAAoC,EACA,kBAAAlC,EACA,qBAAAC,EACA,SAAAC,EACA,cAAAoC,CAAA,CAEJ,EAGHjD,IAAgB,iBAAmBmB,GAAqB,IACjDuC,EAAA,IAACmB,GAAA,CACG,UAAA7B,EACA,YAAAvC,EACA,uBAAAyC,EACA,kBAAAvC,EACA,SAAAE,EACA,kBAAAuC,CAAA,CACJ,EAGPpD,IAAgB,YAAcmB,GAAqB,IAChDuC,EAAA,IAACoB,GAAA,CACG,UAAA9B,EACA,YAAAvC,EACA,kBAAA6C,EACA,kBAAA3C,EACA,qBAAAC,EACA,SAAAC,EACA,aAAA+C,CAAA,CACJ,EAGH5D,IAAgB,mBAAqBmB,GAAqB,IACvDuC,EAAA,IAACqB,GAAA,CACG,UAAA/B,EACA,YAAAvC,EACA,uBAAAoD,EACA,kBAAAlD,EACA,qBAAAC,EACA,SAAAC,EACA,kBAAAkD,CAAA,CACJ,EAGH/D,IAAgB,gBAAkBmB,GAAqB,IACpDuC,EAAA,IAACsB,GAAA,CACG,UAAAhC,EACA,YAAAvC,EACA,qBAAAuD,EACA,kBAAArD,EACA,qBAAAC,EACA,SAAAC,EACA,gBAAAqD,EAAA,CACJ,EAGHlE,IAAgB,eAAiBmB,GAAqB,IACnDuC,EAAA,IAACuB,GAAA,CACG,UAAAjC,EACA,YAAAvC,EACA,gBAAA0D,GACA,kBAAAxD,EACA,qBAAAC,EACA,SAAAC,EACA,WAAAwD,EAAA,CAEJ,EAGHrE,IAAgB,YAAcmB,GAAqB,IAChDuC,EAAA,IAACwB,GAAA,CACG,UAAAlC,EACA,YAAAvC,CAAA,CACJ,EAGHT,IAAgB,gBACbmB,GAAqB,IACjBuC,EAAA,IAACyB,GAAA,CACG,UAAAnC,EACA,YAAAvC,CAAA,CACJ,EAEPM,SACI,MAAI,CAAA,UAAU,8BACX,SAAC2C,MAAA0B,GAAA,CAAgB,MAAO,CAAC,MAAO,OAAQ,OAAQ,QAAS,YAAY,IAAI,KAAK,wBAAwB,kBAAkB,KAAM,CAAA,EAClI,EAEJ1B,EAAAA,IAAC2B,GAAM,CAAA,IAAKhE,CAAO,CAAA,CAAA,EACvB,CAAA,CAAA,CAGZ"}