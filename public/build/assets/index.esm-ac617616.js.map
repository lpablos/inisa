{"version":3,"file":"index.esm-ac617616.js","sources":["../../../node_modules/react-hook-form/dist/index.esm.mjs"],"sourcesContent":["import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    const isFileListInstance = typeof FileList !== 'undefined' ? data instanceof FileList : false;\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || isFileListInstance)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return React.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n        exact: true,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    const fieldState = React.useMemo(() => Object.defineProperties({}, {\n        invalid: {\n            enumerable: true,\n            get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n            enumerable: true,\n            get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n            enumerable: true,\n            get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n            enumerable: true,\n            get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n            enumerable: true,\n            get: () => get(formState.errors, name),\n        },\n    }), [formState, name]);\n    const field = React.useMemo(() => ({\n        name,\n        value,\n        ...(isBoolean(disabled) || formState.disabled\n            ? { disabled: formState.disabled || disabled }\n            : {}),\n        onChange: (event) => _registerProps.current.onChange({\n            target: {\n                value: getEventValue(event),\n                name: name,\n            },\n            type: EVENTS.CHANGE,\n        }),\n        onBlur: () => _registerProps.current.onBlur({\n            target: {\n                value: get(control._formValues, name),\n                name: name,\n            },\n            type: EVENTS.BLUR,\n        }),\n        ref: (elm) => {\n            const field = get(control._fields, name);\n            if (field && elm) {\n                field._f.ref = {\n                    focus: () => elm.focus(),\n                    select: () => elm.select(),\n                    setCustomValidity: (message) => elm.setCustomValidity(message),\n                    reportValidity: () => elm.reportValidity(),\n                };\n            }\n        },\n    }), [\n        name,\n        control._formValues,\n        disabled,\n        formState.disabled,\n        value,\n        control._fields,\n    ]);\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        !isArrayField && control.register(name);\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        control._updateDisabledField({\n            disabled,\n            fields: control._fields,\n            name,\n        });\n    }, [disabled, name, control]);\n    return React.useMemo(() => ({\n        field,\n        formState,\n        fieldState,\n    }), [field, formState, fieldState]);\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst flatten = (obj) => {\n    const output = {};\n    for (const key of Object.keys(obj)) {\n        if (isObjectType(obj[key]) && obj[key] !== null) {\n            const nested = flatten(obj[key]);\n            for (const nestedKey of Object.keys(nested)) {\n                output[`${key}.${nestedKey}`] = nested[nestedKey];\n            }\n        }\n        else {\n            output[key] = obj[key];\n        }\n    }\n    return output;\n};\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            const flattenFormValues = flatten(control._formValues);\n            for (const key in flattenFormValues) {\n                formData.append(key, flattenFormValues[key]);\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(String(action), {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    return true;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    return true;\n                }\n                else {\n                    if (iterateFieldsByAction(currentField, action)) {\n                        break;\n                    }\n                }\n            }\n            else if (isObject(currentField)) {\n                if (iterateFieldsByAction(currentField, action)) {\n                    break;\n                }\n            }\n        }\n    }\n    return;\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabledFieldNames.has(name)) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, rules, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    rules &&\n        control.register(name, rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        !Array.isArray(get(control._fields, name)) &&\n            set(control._fields, name, undefined);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._names.disabled, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nconst ASYNC_FUNCTION = 'AsyncFunction';\nvar hasPromiseValidation = (fieldReference) => !!fieldReference &&\n    !!fieldReference.validate &&\n    !!((isFunction(fieldReference.validate) &&\n        fieldReference.validate.constructor.name === ASYNC_FUNCTION) ||\n        (isObject(fieldReference.validate) &&\n            Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)));\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        disabled: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (!_options.disabled && (_proxyFormState.isValid || shouldUpdateValid)) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (!_options.disabled &&\n            (_proxyFormState.isValidating || _proxyFormState.validatingFields)) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method && !_options.disabled) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        if (!_options.disabled) {\n            const disabledField = !!(get(_fields, name) &&\n                get(_fields, name)._f &&\n                get(_fields, name)._f.disabled);\n            if (!isBlurEvent || shouldDirty) {\n                if (_proxyFormState.isDirty) {\n                    isPreviousDirty = _formState.isDirty;\n                    _formState.isDirty = output.isDirty = _getDirty();\n                    shouldUpdateField = isPreviousDirty !== output.isDirty;\n                }\n                const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n                isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n                isCurrentFieldPristine || disabledField\n                    ? unset(_formState.dirtyFields, name)\n                    : set(_formState.dirtyFields, name, true);\n                output.dirtyFields = _formState.dirtyFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.dirtyFields &&\n                            isPreviousDirty !== !isCurrentFieldPristine);\n            }\n            if (isBlurEvent) {\n                const isPreviousFieldTouched = get(_formState.touchedFields, name);\n                if (!isPreviousFieldTouched) {\n                    set(_formState.touchedFields, name, isBlurEvent);\n                    output.touchedFields = _formState.touchedFields;\n                    shouldUpdateField =\n                        shouldUpdateField ||\n                            (_proxyFormState.touchedFields &&\n                                isPreviousFieldTouched !== isBlurEvent);\n                }\n            }\n            shouldUpdateField && shouldRender && _subjects.state.next(output);\n        }\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (_options.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(_options.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    const isPromiseFunction = field._f && hasPromiseValidation(field._f);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name], true);\n                    }\n                    const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    if (isPromiseFunction && _proxyFormState.validatingFields) {\n                        _updateIsValidating([name]);\n                    }\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                !isEmptyObject(fieldValue) &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => !_options.disabled &&\n        (name && data && set(_formValues, name, data),\n            !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                isObject(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    (isDateObject(fieldValue) && isNaN(fieldValue.getTime())) ||\n                    deepEqual(fieldValue, get(_formValues, name, fieldValue));\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                if (_proxyFormState.isValid) {\n                    if (_options.mode === 'onBlur' && isBlurEvent) {\n                        _updateValid();\n                    }\n                    else if (!isBlurEvent) {\n                        _updateValid();\n                    }\n                }\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, }) => {\n        if ((isBoolean(disabled) && _state.mount) ||\n            !!disabled ||\n            _names.disabled.has(name)) {\n            disabled ? _names.disabled.add(name) : _names.disabled.delete(name);\n            updateTouchAndDirty(name, getFieldValue(field ? field._f : get(fields, name)._f), false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: isBoolean(options.disabled)\n                    ? options.disabled\n                    : _options.disabled,\n                name,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined\n                ? { disabled: options.disabled || _options.disabled }\n                : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        if (_names.disabled.size) {\n            for (const name of _names.disabled) {\n                set(fieldValues, name, undefined);\n            }\n        }\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                const fieldsToCheck = new Set([\n                    ..._names.mount,\n                    ...Object.keys(getDirtyFields(_defaultValues, _formValues)),\n                ]);\n                for (const fieldName of Array.from(fieldsToCheck)) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = _options.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            disabled: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!_options.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect &&\n                    isFunction(fieldRef.select) &&\n                    fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef(undefined);\n    const _values = React.useRef(undefined);\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n"],"names":["isCheckBoxInput","element","isDateObject","value","isNullOrUndefined","isObjectType","isObject","getEventValue","event","getNodeParentName","name","isNameInFieldArray","names","isPlainObject","tempObject","prototypeCopy","isWeb","cloneObject","data","copy","isArray","isFileListInstance","key","compact","isUndefined","val","get","object","path","defaultValue","result","isBoolean","isKey","stringToPath","input","set","index","tempPath","length","lastIndex","newValue","objValue","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","React","getProxyFormState","formState","control","localProxyFormState","isRoot","_key","isEmptyObject","shouldRenderFormState","formStateData","_proxyFormState","updateFormState","convertToArrayPayload","useSubscribe","props","_props","subscription","isString","generateWatchOutput","_names","formValues","isGlobal","fieldName","appendErrors","validateAllFieldCriteria","errors","type","message","getValidationModes","mode","isWatched","isBlurEvent","watchName","iterateFieldsByAction","fields","action","fieldsNames","abortEarly","field","_f","currentField","updateFieldArrayRootError","error","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","isMessage","isRadioInput","isRegex","defaultResult","validResult","getCheckboxValue","options","values","option","defaultReturn","getRadioValue","previous","getValidateError","ref","getValueAndMessage","validationData","validateField","disabledFieldNames","shouldUseNativeValidation","isFieldArray","refs","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","mount","inputValue","inputRef","setCustomValidity","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueNumber","valueDate","convertTimeToDate","time","isTime","isWeek","maxLengthOutput","minLengthOutput","patternValue","validateError","validationResult","baseGet","updatePath","isEmptyArray","obj","unset","paths","childObject","createSubject","_observers","observer","o","isPrimitive","deepEqual","object1","object2","keys1","keys2","val1","val2","isMultipleSelect","live","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","defaultValues","getFieldValueAs","valueAsDate","setValueAs","getFieldValue","getResolverOptions","_fields","criteriaMode","getRuleValue","rule","ASYNC_FUNCTION","hasPromiseValidation","fieldReference","validateFunction","hasValidation","schemaErrorLookup","foundError","skipValidation","isTouched","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","createFormControl","_options","_formState","_defaultValues","_formValues","_state","delayErrorCallback","timer","_subjects","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","callback","wait","_updateValid","shouldUpdateValid","isValid","_executeSchema","executeBuiltInValidation","_updateIsValidating","isValidating","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","touchedFields","_getDirty","updateErrors","_setErrors","updateValidAndValue","shouldSkipSetValueAs","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","fieldState","previousFieldError","updatedFormState","executeSchemaAndUpdateState","shouldOnlyCheckValid","context","isFieldArrayRoot","isPromiseFunction","fieldError","_removeUnmounted","unregister","getValues","_getWatch","_getFieldArray","optionRef","checkboxRef","radioRef","trigger","setValues","fieldKey","setValue","cloneValue","onChange","target","isFieldValueUpdated","getCurrentFieldValue","_updateIsFieldValueUpdated","shouldSkipValidation","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","getFieldState","clearErrors","inputName","setError","currentError","currentRef","restOfErrorTree","watch","payload","_updateDisabledField","disabled","register","disabledIsDefined","fieldRef","radioOrCheckbox","_focusError","_disableForm","handleSubmit","onValid","onInvalid","e","onValidError","resetField","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","fieldsToCheck","form","reset","useForm","_formControl","_values","isDirty","state"],"mappings":"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","x_google_ignoreList":[0]}